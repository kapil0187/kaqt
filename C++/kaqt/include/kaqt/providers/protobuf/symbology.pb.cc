// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: symbology.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "symbology.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kaqt {
namespace providers {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* FuturesInstrumentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FuturesInstrumentRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FuturesInstrumentRequest_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FuturesInstrumentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FuturesInstrumentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FuturesInstrument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FuturesInstrument_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlternateId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlternateId_reflection_ = NULL;
const ::google::protobuf::Descriptor* Instrument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Instrument_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Instrument_InstrumentType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FutureSpecification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FutureSpecification_reflection_ = NULL;
const ::google::protobuf::Descriptor* OptionSpecification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptionSpecification_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForexSpecification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForexSpecification_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_symbology_2eproto() {
  protobuf_AddDesc_symbology_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "symbology.proto");
  GOOGLE_CHECK(file != NULL);
  FuturesInstrumentRequest_descriptor_ = file->message_type(0);
  static const int FuturesInstrumentRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrumentRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrumentRequest, underlying_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrumentRequest, exchange_),
  };
  FuturesInstrumentRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FuturesInstrumentRequest_descriptor_,
      FuturesInstrumentRequest::default_instance_,
      FuturesInstrumentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrumentRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrumentRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FuturesInstrumentRequest));
  FuturesInstrumentRequest_RequestType_descriptor_ = FuturesInstrumentRequest_descriptor_->enum_type(0);
  FuturesInstrumentResponse_descriptor_ = file->message_type(1);
  static const int FuturesInstrumentResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrumentResponse, instruments_),
  };
  FuturesInstrumentResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FuturesInstrumentResponse_descriptor_,
      FuturesInstrumentResponse::default_instance_,
      FuturesInstrumentResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrumentResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrumentResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FuturesInstrumentResponse));
  FuturesInstrument_descriptor_ = file->message_type(2);
  static const int FuturesInstrument_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrument, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrument, ticker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrument, underlying_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrument, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrument, exchange_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrument, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrument, expiry_posix_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrument, min_order_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrument, tick_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrument, tradeable_tick_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrument, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrument, alternate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrument, constituents_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrument, constituents_ratios_),
  };
  FuturesInstrument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FuturesInstrument_descriptor_,
      FuturesInstrument::default_instance_,
      FuturesInstrument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuturesInstrument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FuturesInstrument));
  AlternateId_descriptor_ = file->message_type(3);
  static const int AlternateId_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlternateId, id_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlternateId, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlternateId, description_),
  };
  AlternateId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlternateId_descriptor_,
      AlternateId::default_instance_,
      AlternateId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlternateId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlternateId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlternateId));
  Instrument_descriptor_ = file->message_type(4);
  static const int Instrument_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, ticker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, exchange_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, min_order_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, tick_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, tradeable_tick_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, alternate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, futures_spec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, options_spec_),
  };
  Instrument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Instrument_descriptor_,
      Instrument::default_instance_,
      Instrument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Instrument));
  Instrument_InstrumentType_descriptor_ = Instrument_descriptor_->enum_type(0);
  FutureSpecification_descriptor_ = file->message_type(5);
  static const int FutureSpecification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureSpecification, expiry_posix_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureSpecification, underlying_),
  };
  FutureSpecification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FutureSpecification_descriptor_,
      FutureSpecification::default_instance_,
      FutureSpecification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureSpecification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureSpecification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FutureSpecification));
  OptionSpecification_descriptor_ = file->message_type(6);
  static const int OptionSpecification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionSpecification, strike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionSpecification, expiry_posix_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionSpecification, underlying_),
  };
  OptionSpecification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OptionSpecification_descriptor_,
      OptionSpecification::default_instance_,
      OptionSpecification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionSpecification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionSpecification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OptionSpecification));
  ForexSpecification_descriptor_ = file->message_type(7);
  static const int ForexSpecification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForexSpecification, counter_currency_),
  };
  ForexSpecification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForexSpecification_descriptor_,
      ForexSpecification::default_instance_,
      ForexSpecification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForexSpecification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForexSpecification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForexSpecification));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_symbology_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FuturesInstrumentRequest_descriptor_, &FuturesInstrumentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FuturesInstrumentResponse_descriptor_, &FuturesInstrumentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FuturesInstrument_descriptor_, &FuturesInstrument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlternateId_descriptor_, &AlternateId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Instrument_descriptor_, &Instrument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FutureSpecification_descriptor_, &FutureSpecification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OptionSpecification_descriptor_, &OptionSpecification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForexSpecification_descriptor_, &ForexSpecification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_symbology_2eproto() {
  delete FuturesInstrumentRequest::default_instance_;
  delete FuturesInstrumentRequest_reflection_;
  delete FuturesInstrumentResponse::default_instance_;
  delete FuturesInstrumentResponse_reflection_;
  delete FuturesInstrument::default_instance_;
  delete FuturesInstrument_reflection_;
  delete AlternateId::default_instance_;
  delete AlternateId_reflection_;
  delete Instrument::default_instance_;
  delete Instrument_reflection_;
  delete FutureSpecification::default_instance_;
  delete FutureSpecification_reflection_;
  delete OptionSpecification::default_instance_;
  delete OptionSpecification_reflection_;
  delete ForexSpecification::default_instance_;
  delete ForexSpecification_reflection_;
}

void protobuf_AddDesc_symbology_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017symbology.proto\022\027kaqt.providers.protob"
    "uf\"\303\001\n\030FuturesInstrumentRequest\022K\n\004type\030"
    "\001 \002(\0162=.kaqt.providers.protobuf.FuturesI"
    "nstrumentRequest.RequestType\022\022\n\nunderlyi"
    "ng\030\002 \001(\t\022\020\n\010exchange\030\003 \001(\t\"4\n\013RequestTyp"
    "e\022\007\n\003ALL\020\000\022\016\n\nUNDERLYING\020\001\022\014\n\010EXCHANGE\020\002"
    "\"\\\n\031FuturesInstrumentResponse\022\?\n\013instrum"
    "ents\030\001 \003(\0132*.kaqt.providers.protobuf.Fut"
    "uresInstrument\"\356\002\n\021FuturesInstrument\022\n\n\002"
    "id\030\001 \002(\005\022\016\n\006ticker\030\002 \002(\t\022\022\n\nunderlying\030\003"
    " \001(\t\022\023\n\013description\030\004 \002(\t\022\026\n\016exchange_gr"
    "oup\030\005 \002(\t\022\020\n\010exchange\030\006 \002(\t\022\035\n\025expiry_po"
    "six_datetime\030\007 \002(\003\022\026\n\016min_order_size\030\010 \002"
    "(\005\022\021\n\ttick_size\030\t \002(\001\022\033\n\023tradeable_tick_"
    "size\030\n \002(\001\022\020\n\010currency\030\013 \002(\t\022:\n\014alternat"
    "e_id\030\014 \003(\0132$.kaqt.providers.protobuf.Alt"
    "ernateId\022\030\n\020constituents_ids\030\r \003(\005\022\033\n\023co"
    "nstituents_ratios\030\016 \003(\005\"\?\n\013AlternateId\022\017"
    "\n\007id_type\030\001 \002(\t\022\n\n\002id\030\002 \002(\t\022\023\n\013descripti"
    "on\030\003 \001(\t\"\207\004\n\nInstrument\022\n\n\002id\030\001 \002(\005\022@\n\004t"
    "ype\030\002 \002(\01622.kaqt.providers.protobuf.Inst"
    "rument.InstrumentType\022\016\n\006ticker\030\003 \002(\t\022\023\n"
    "\013description\030\004 \002(\t\022\020\n\010exchange\030\005 \002(\t\022\026\n\016"
    "exchange_group\030\006 \001(\t\022\026\n\016min_order_size\030\007"
    " \002(\005\022\021\n\ttick_size\030\010 \002(\001\022\033\n\023tradeable_tic"
    "k_size\030\t \002(\001\022\020\n\010currency\030\n \002(\t\022:\n\014altern"
    "ate_id\030\013 \003(\0132$.kaqt.providers.protobuf.A"
    "lternateId\022B\n\014futures_spec\030\014 \001(\0132,.kaqt."
    "providers.protobuf.FutureSpecification\022B"
    "\n\014options_spec\030\r \001(\0132,.kaqt.providers.pr"
    "otobuf.OptionSpecification\">\n\016Instrument"
    "Type\022\t\n\005STOCK\020\000\022\n\n\006FUTURE\020\001\022\n\n\006OPTION\020\002\022"
    "\t\n\005FOREX\020\003\"H\n\023FutureSpecification\022\035\n\025exp"
    "iry_posix_datetime\030\001 \002(\003\022\022\n\nunderlying\030\002"
    " \002(\t\"X\n\023OptionSpecification\022\016\n\006strike\030\001 "
    "\002(\001\022\035\n\025expiry_posix_datetime\030\002 \002(\003\022\022\n\nun"
    "derlying\030\003 \002(\t\".\n\022ForexSpecification\022\030\n\020"
    "counter_currency\030\001 \002(\t", 1502);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "symbology.proto", &protobuf_RegisterTypes);
  FuturesInstrumentRequest::default_instance_ = new FuturesInstrumentRequest();
  FuturesInstrumentResponse::default_instance_ = new FuturesInstrumentResponse();
  FuturesInstrument::default_instance_ = new FuturesInstrument();
  AlternateId::default_instance_ = new AlternateId();
  Instrument::default_instance_ = new Instrument();
  FutureSpecification::default_instance_ = new FutureSpecification();
  OptionSpecification::default_instance_ = new OptionSpecification();
  ForexSpecification::default_instance_ = new ForexSpecification();
  FuturesInstrumentRequest::default_instance_->InitAsDefaultInstance();
  FuturesInstrumentResponse::default_instance_->InitAsDefaultInstance();
  FuturesInstrument::default_instance_->InitAsDefaultInstance();
  AlternateId::default_instance_->InitAsDefaultInstance();
  Instrument::default_instance_->InitAsDefaultInstance();
  FutureSpecification::default_instance_->InitAsDefaultInstance();
  OptionSpecification::default_instance_->InitAsDefaultInstance();
  ForexSpecification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_symbology_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_symbology_2eproto {
  StaticDescriptorInitializer_symbology_2eproto() {
    protobuf_AddDesc_symbology_2eproto();
  }
} static_descriptor_initializer_symbology_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* FuturesInstrumentRequest_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FuturesInstrumentRequest_RequestType_descriptor_;
}
bool FuturesInstrumentRequest_RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FuturesInstrumentRequest_RequestType FuturesInstrumentRequest::ALL;
const FuturesInstrumentRequest_RequestType FuturesInstrumentRequest::UNDERLYING;
const FuturesInstrumentRequest_RequestType FuturesInstrumentRequest::EXCHANGE;
const FuturesInstrumentRequest_RequestType FuturesInstrumentRequest::RequestType_MIN;
const FuturesInstrumentRequest_RequestType FuturesInstrumentRequest::RequestType_MAX;
const int FuturesInstrumentRequest::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FuturesInstrumentRequest::kTypeFieldNumber;
const int FuturesInstrumentRequest::kUnderlyingFieldNumber;
const int FuturesInstrumentRequest::kExchangeFieldNumber;
#endif  // !_MSC_VER

FuturesInstrumentRequest::FuturesInstrumentRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kaqt.providers.protobuf.FuturesInstrumentRequest)
}

void FuturesInstrumentRequest::InitAsDefaultInstance() {
}

FuturesInstrumentRequest::FuturesInstrumentRequest(const FuturesInstrumentRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kaqt.providers.protobuf.FuturesInstrumentRequest)
}

void FuturesInstrumentRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  underlying_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FuturesInstrumentRequest::~FuturesInstrumentRequest() {
  // @@protoc_insertion_point(destructor:kaqt.providers.protobuf.FuturesInstrumentRequest)
  SharedDtor();
}

void FuturesInstrumentRequest::SharedDtor() {
  if (underlying_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete underlying_;
  }
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (this != default_instance_) {
  }
}

void FuturesInstrumentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FuturesInstrumentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FuturesInstrumentRequest_descriptor_;
}

const FuturesInstrumentRequest& FuturesInstrumentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbology_2eproto();
  return *default_instance_;
}

FuturesInstrumentRequest* FuturesInstrumentRequest::default_instance_ = NULL;

FuturesInstrumentRequest* FuturesInstrumentRequest::New() const {
  return new FuturesInstrumentRequest;
}

void FuturesInstrumentRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 0;
    if (has_underlying()) {
      if (underlying_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        underlying_->clear();
      }
    }
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FuturesInstrumentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kaqt.providers.protobuf.FuturesInstrumentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .kaqt.providers.protobuf.FuturesInstrumentRequest.RequestType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kaqt::providers::protobuf::FuturesInstrumentRequest_RequestType_IsValid(value)) {
            set_type(static_cast< ::kaqt::providers::protobuf::FuturesInstrumentRequest_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_underlying;
        break;
      }

      // optional string underlying = 2;
      case 2: {
        if (tag == 18) {
         parse_underlying:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlying().data(), this->underlying().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "underlying");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_exchange;
        break;
      }

      // optional string exchange = 3;
      case 3: {
        if (tag == 26) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kaqt.providers.protobuf.FuturesInstrumentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kaqt.providers.protobuf.FuturesInstrumentRequest)
  return false;
#undef DO_
}

void FuturesInstrumentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kaqt.providers.protobuf.FuturesInstrumentRequest)
  // required .kaqt.providers.protobuf.FuturesInstrumentRequest.RequestType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string underlying = 2;
  if (has_underlying()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying().data(), this->underlying().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "underlying");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->underlying(), output);
  }

  // optional string exchange = 3;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kaqt.providers.protobuf.FuturesInstrumentRequest)
}

::google::protobuf::uint8* FuturesInstrumentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaqt.providers.protobuf.FuturesInstrumentRequest)
  // required .kaqt.providers.protobuf.FuturesInstrumentRequest.RequestType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string underlying = 2;
  if (has_underlying()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying().data(), this->underlying().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "underlying");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->underlying(), target);
  }

  // optional string exchange = 3;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaqt.providers.protobuf.FuturesInstrumentRequest)
  return target;
}

int FuturesInstrumentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .kaqt.providers.protobuf.FuturesInstrumentRequest.RequestType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string underlying = 2;
    if (has_underlying()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying());
    }

    // optional string exchange = 3;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FuturesInstrumentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FuturesInstrumentRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FuturesInstrumentRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FuturesInstrumentRequest::MergeFrom(const FuturesInstrumentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_underlying()) {
      set_underlying(from.underlying());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FuturesInstrumentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuturesInstrumentRequest::CopyFrom(const FuturesInstrumentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuturesInstrumentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FuturesInstrumentRequest::Swap(FuturesInstrumentRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(underlying_, other->underlying_);
    std::swap(exchange_, other->exchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FuturesInstrumentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FuturesInstrumentRequest_descriptor_;
  metadata.reflection = FuturesInstrumentRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FuturesInstrumentResponse::kInstrumentsFieldNumber;
#endif  // !_MSC_VER

FuturesInstrumentResponse::FuturesInstrumentResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kaqt.providers.protobuf.FuturesInstrumentResponse)
}

void FuturesInstrumentResponse::InitAsDefaultInstance() {
}

FuturesInstrumentResponse::FuturesInstrumentResponse(const FuturesInstrumentResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kaqt.providers.protobuf.FuturesInstrumentResponse)
}

void FuturesInstrumentResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FuturesInstrumentResponse::~FuturesInstrumentResponse() {
  // @@protoc_insertion_point(destructor:kaqt.providers.protobuf.FuturesInstrumentResponse)
  SharedDtor();
}

void FuturesInstrumentResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FuturesInstrumentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FuturesInstrumentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FuturesInstrumentResponse_descriptor_;
}

const FuturesInstrumentResponse& FuturesInstrumentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbology_2eproto();
  return *default_instance_;
}

FuturesInstrumentResponse* FuturesInstrumentResponse::default_instance_ = NULL;

FuturesInstrumentResponse* FuturesInstrumentResponse::New() const {
  return new FuturesInstrumentResponse;
}

void FuturesInstrumentResponse::Clear() {
  instruments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FuturesInstrumentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kaqt.providers.protobuf.FuturesInstrumentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kaqt.providers.protobuf.FuturesInstrument instruments = 1;
      case 1: {
        if (tag == 10) {
         parse_instruments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instruments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_instruments;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kaqt.providers.protobuf.FuturesInstrumentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kaqt.providers.protobuf.FuturesInstrumentResponse)
  return false;
#undef DO_
}

void FuturesInstrumentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kaqt.providers.protobuf.FuturesInstrumentResponse)
  // repeated .kaqt.providers.protobuf.FuturesInstrument instruments = 1;
  for (int i = 0; i < this->instruments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instruments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kaqt.providers.protobuf.FuturesInstrumentResponse)
}

::google::protobuf::uint8* FuturesInstrumentResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaqt.providers.protobuf.FuturesInstrumentResponse)
  // repeated .kaqt.providers.protobuf.FuturesInstrument instruments = 1;
  for (int i = 0; i < this->instruments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instruments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaqt.providers.protobuf.FuturesInstrumentResponse)
  return target;
}

int FuturesInstrumentResponse::ByteSize() const {
  int total_size = 0;

  // repeated .kaqt.providers.protobuf.FuturesInstrument instruments = 1;
  total_size += 1 * this->instruments_size();
  for (int i = 0; i < this->instruments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instruments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FuturesInstrumentResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FuturesInstrumentResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FuturesInstrumentResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FuturesInstrumentResponse::MergeFrom(const FuturesInstrumentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  instruments_.MergeFrom(from.instruments_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FuturesInstrumentResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuturesInstrumentResponse::CopyFrom(const FuturesInstrumentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuturesInstrumentResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->instruments())) return false;
  return true;
}

void FuturesInstrumentResponse::Swap(FuturesInstrumentResponse* other) {
  if (other != this) {
    instruments_.Swap(&other->instruments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FuturesInstrumentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FuturesInstrumentResponse_descriptor_;
  metadata.reflection = FuturesInstrumentResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FuturesInstrument::kIdFieldNumber;
const int FuturesInstrument::kTickerFieldNumber;
const int FuturesInstrument::kUnderlyingFieldNumber;
const int FuturesInstrument::kDescriptionFieldNumber;
const int FuturesInstrument::kExchangeGroupFieldNumber;
const int FuturesInstrument::kExchangeFieldNumber;
const int FuturesInstrument::kExpiryPosixDatetimeFieldNumber;
const int FuturesInstrument::kMinOrderSizeFieldNumber;
const int FuturesInstrument::kTickSizeFieldNumber;
const int FuturesInstrument::kTradeableTickSizeFieldNumber;
const int FuturesInstrument::kCurrencyFieldNumber;
const int FuturesInstrument::kAlternateIdFieldNumber;
const int FuturesInstrument::kConstituentsIdsFieldNumber;
const int FuturesInstrument::kConstituentsRatiosFieldNumber;
#endif  // !_MSC_VER

FuturesInstrument::FuturesInstrument()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kaqt.providers.protobuf.FuturesInstrument)
}

void FuturesInstrument::InitAsDefaultInstance() {
}

FuturesInstrument::FuturesInstrument(const FuturesInstrument& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kaqt.providers.protobuf.FuturesInstrument)
}

void FuturesInstrument::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  ticker_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlying_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiry_posix_datetime_ = GOOGLE_LONGLONG(0);
  min_order_size_ = 0;
  tick_size_ = 0;
  tradeable_tick_size_ = 0;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FuturesInstrument::~FuturesInstrument() {
  // @@protoc_insertion_point(destructor:kaqt.providers.protobuf.FuturesInstrument)
  SharedDtor();
}

void FuturesInstrument::SharedDtor() {
  if (ticker_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ticker_;
  }
  if (underlying_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete underlying_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (exchange_group_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_group_;
  }
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currency_;
  }
  if (this != default_instance_) {
  }
}

void FuturesInstrument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FuturesInstrument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FuturesInstrument_descriptor_;
}

const FuturesInstrument& FuturesInstrument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbology_2eproto();
  return *default_instance_;
}

FuturesInstrument* FuturesInstrument::default_instance_ = NULL;

FuturesInstrument* FuturesInstrument::New() const {
  return new FuturesInstrument;
}

void FuturesInstrument::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FuturesInstrument*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, min_order_size_);
    if (has_ticker()) {
      if (ticker_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ticker_->clear();
      }
    }
    if (has_underlying()) {
      if (underlying_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        underlying_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_exchange_group()) {
      if (exchange_group_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_group_->clear();
      }
    }
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
    expiry_posix_datetime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(tick_size_, tradeable_tick_size_);
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        currency_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  alternate_id_.Clear();
  constituents_ids_.Clear();
  constituents_ratios_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FuturesInstrument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kaqt.providers.protobuf.FuturesInstrument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ticker;
        break;
      }

      // required string ticker = 2;
      case 2: {
        if (tag == 18) {
         parse_ticker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticker()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticker().data(), this->ticker().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ticker");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_underlying;
        break;
      }

      // optional string underlying = 3;
      case 3: {
        if (tag == 26) {
         parse_underlying:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlying().data(), this->underlying().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "underlying");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // required string description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_exchange_group;
        break;
      }

      // required string exchange_group = 5;
      case 5: {
        if (tag == 42) {
         parse_exchange_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange_group().data(), this->exchange_group().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange_group");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_exchange;
        break;
      }

      // required string exchange = 6;
      case 6: {
        if (tag == 50) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_expiry_posix_datetime;
        break;
      }

      // required int64 expiry_posix_datetime = 7;
      case 7: {
        if (tag == 56) {
         parse_expiry_posix_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiry_posix_datetime_)));
          set_has_expiry_posix_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_min_order_size;
        break;
      }

      // required int32 min_order_size = 8;
      case 8: {
        if (tag == 64) {
         parse_min_order_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_order_size_)));
          set_has_min_order_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_tick_size;
        break;
      }

      // required double tick_size = 9;
      case 9: {
        if (tag == 73) {
         parse_tick_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tick_size_)));
          set_has_tick_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_tradeable_tick_size;
        break;
      }

      // required double tradeable_tick_size = 10;
      case 10: {
        if (tag == 81) {
         parse_tradeable_tick_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tradeable_tick_size_)));
          set_has_tradeable_tick_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_currency;
        break;
      }

      // required string currency = 11;
      case 11: {
        if (tag == 90) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "currency");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_alternate_id;
        break;
      }

      // repeated .kaqt.providers.protobuf.AlternateId alternate_id = 12;
      case 12: {
        if (tag == 98) {
         parse_alternate_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alternate_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_alternate_id;
        if (input->ExpectTag(104)) goto parse_constituents_ids;
        break;
      }

      // repeated int32 constituents_ids = 13;
      case 13: {
        if (tag == 104) {
         parse_constituents_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_constituents_ids())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_constituents_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_constituents_ids;
        if (input->ExpectTag(112)) goto parse_constituents_ratios;
        break;
      }

      // repeated int32 constituents_ratios = 14;
      case 14: {
        if (tag == 112) {
         parse_constituents_ratios:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_constituents_ratios())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_constituents_ratios())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_constituents_ratios;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kaqt.providers.protobuf.FuturesInstrument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kaqt.providers.protobuf.FuturesInstrument)
  return false;
#undef DO_
}

void FuturesInstrument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kaqt.providers.protobuf.FuturesInstrument)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string ticker = 2;
  if (has_ticker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticker().data(), this->ticker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ticker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ticker(), output);
  }

  // optional string underlying = 3;
  if (has_underlying()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying().data(), this->underlying().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "underlying");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->underlying(), output);
  }

  // required string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // required string exchange_group = 5;
  if (has_exchange_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_group().data(), this->exchange_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchange_group(), output);
  }

  // required string exchange = 6;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->exchange(), output);
  }

  // required int64 expiry_posix_datetime = 7;
  if (has_expiry_posix_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->expiry_posix_datetime(), output);
  }

  // required int32 min_order_size = 8;
  if (has_min_order_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->min_order_size(), output);
  }

  // required double tick_size = 9;
  if (has_tick_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->tick_size(), output);
  }

  // required double tradeable_tick_size = 10;
  if (has_tradeable_tick_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->tradeable_tick_size(), output);
  }

  // required string currency = 11;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->currency(), output);
  }

  // repeated .kaqt.providers.protobuf.AlternateId alternate_id = 12;
  for (int i = 0; i < this->alternate_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->alternate_id(i), output);
  }

  // repeated int32 constituents_ids = 13;
  for (int i = 0; i < this->constituents_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->constituents_ids(i), output);
  }

  // repeated int32 constituents_ratios = 14;
  for (int i = 0; i < this->constituents_ratios_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->constituents_ratios(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kaqt.providers.protobuf.FuturesInstrument)
}

::google::protobuf::uint8* FuturesInstrument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaqt.providers.protobuf.FuturesInstrument)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string ticker = 2;
  if (has_ticker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticker().data(), this->ticker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ticker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ticker(), target);
  }

  // optional string underlying = 3;
  if (has_underlying()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying().data(), this->underlying().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "underlying");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->underlying(), target);
  }

  // required string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // required string exchange_group = 5;
  if (has_exchange_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_group().data(), this->exchange_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchange_group(), target);
  }

  // required string exchange = 6;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->exchange(), target);
  }

  // required int64 expiry_posix_datetime = 7;
  if (has_expiry_posix_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->expiry_posix_datetime(), target);
  }

  // required int32 min_order_size = 8;
  if (has_min_order_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->min_order_size(), target);
  }

  // required double tick_size = 9;
  if (has_tick_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->tick_size(), target);
  }

  // required double tradeable_tick_size = 10;
  if (has_tradeable_tick_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->tradeable_tick_size(), target);
  }

  // required string currency = 11;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->currency(), target);
  }

  // repeated .kaqt.providers.protobuf.AlternateId alternate_id = 12;
  for (int i = 0; i < this->alternate_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->alternate_id(i), target);
  }

  // repeated int32 constituents_ids = 13;
  for (int i = 0; i < this->constituents_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->constituents_ids(i), target);
  }

  // repeated int32 constituents_ratios = 14;
  for (int i = 0; i < this->constituents_ratios_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->constituents_ratios(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaqt.providers.protobuf.FuturesInstrument)
  return target;
}

int FuturesInstrument::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string ticker = 2;
    if (has_ticker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticker());
    }

    // optional string underlying = 3;
    if (has_underlying()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying());
    }

    // required string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required string exchange_group = 5;
    if (has_exchange_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange_group());
    }

    // required string exchange = 6;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // required int64 expiry_posix_datetime = 7;
    if (has_expiry_posix_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiry_posix_datetime());
    }

    // required int32 min_order_size = 8;
    if (has_min_order_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_order_size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double tick_size = 9;
    if (has_tick_size()) {
      total_size += 1 + 8;
    }

    // required double tradeable_tick_size = 10;
    if (has_tradeable_tick_size()) {
      total_size += 1 + 8;
    }

    // required string currency = 11;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

  }
  // repeated .kaqt.providers.protobuf.AlternateId alternate_id = 12;
  total_size += 1 * this->alternate_id_size();
  for (int i = 0; i < this->alternate_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alternate_id(i));
  }

  // repeated int32 constituents_ids = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->constituents_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->constituents_ids(i));
    }
    total_size += 1 * this->constituents_ids_size() + data_size;
  }

  // repeated int32 constituents_ratios = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->constituents_ratios_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->constituents_ratios(i));
    }
    total_size += 1 * this->constituents_ratios_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FuturesInstrument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FuturesInstrument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FuturesInstrument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FuturesInstrument::MergeFrom(const FuturesInstrument& from) {
  GOOGLE_CHECK_NE(&from, this);
  alternate_id_.MergeFrom(from.alternate_id_);
  constituents_ids_.MergeFrom(from.constituents_ids_);
  constituents_ratios_.MergeFrom(from.constituents_ratios_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ticker()) {
      set_ticker(from.ticker());
    }
    if (from.has_underlying()) {
      set_underlying(from.underlying());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_exchange_group()) {
      set_exchange_group(from.exchange_group());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_expiry_posix_datetime()) {
      set_expiry_posix_datetime(from.expiry_posix_datetime());
    }
    if (from.has_min_order_size()) {
      set_min_order_size(from.min_order_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tick_size()) {
      set_tick_size(from.tick_size());
    }
    if (from.has_tradeable_tick_size()) {
      set_tradeable_tick_size(from.tradeable_tick_size());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FuturesInstrument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuturesInstrument::CopyFrom(const FuturesInstrument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuturesInstrument::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007fb) != 0x000007fb) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->alternate_id())) return false;
  return true;
}

void FuturesInstrument::Swap(FuturesInstrument* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ticker_, other->ticker_);
    std::swap(underlying_, other->underlying_);
    std::swap(description_, other->description_);
    std::swap(exchange_group_, other->exchange_group_);
    std::swap(exchange_, other->exchange_);
    std::swap(expiry_posix_datetime_, other->expiry_posix_datetime_);
    std::swap(min_order_size_, other->min_order_size_);
    std::swap(tick_size_, other->tick_size_);
    std::swap(tradeable_tick_size_, other->tradeable_tick_size_);
    std::swap(currency_, other->currency_);
    alternate_id_.Swap(&other->alternate_id_);
    constituents_ids_.Swap(&other->constituents_ids_);
    constituents_ratios_.Swap(&other->constituents_ratios_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FuturesInstrument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FuturesInstrument_descriptor_;
  metadata.reflection = FuturesInstrument_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlternateId::kIdTypeFieldNumber;
const int AlternateId::kIdFieldNumber;
const int AlternateId::kDescriptionFieldNumber;
#endif  // !_MSC_VER

AlternateId::AlternateId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kaqt.providers.protobuf.AlternateId)
}

void AlternateId::InitAsDefaultInstance() {
}

AlternateId::AlternateId(const AlternateId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kaqt.providers.protobuf.AlternateId)
}

void AlternateId::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlternateId::~AlternateId() {
  // @@protoc_insertion_point(destructor:kaqt.providers.protobuf.AlternateId)
  SharedDtor();
}

void AlternateId::SharedDtor() {
  if (id_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_type_;
  }
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void AlternateId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlternateId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlternateId_descriptor_;
}

const AlternateId& AlternateId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbology_2eproto();
  return *default_instance_;
}

AlternateId* AlternateId::default_instance_ = NULL;

AlternateId* AlternateId::New() const {
  return new AlternateId;
}

void AlternateId::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_id_type()) {
      if (id_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_type_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlternateId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kaqt.providers.protobuf.AlternateId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id_type().data(), this->id_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kaqt.providers.protobuf.AlternateId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kaqt.providers.protobuf.AlternateId)
  return false;
#undef DO_
}

void AlternateId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kaqt.providers.protobuf.AlternateId)
  // required string id_type = 1;
  if (has_id_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id_type().data(), this->id_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id_type(), output);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kaqt.providers.protobuf.AlternateId)
}

::google::protobuf::uint8* AlternateId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaqt.providers.protobuf.AlternateId)
  // required string id_type = 1;
  if (has_id_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id_type().data(), this->id_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id_type(), target);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaqt.providers.protobuf.AlternateId)
  return target;
}

int AlternateId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id_type = 1;
    if (has_id_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id_type());
    }

    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlternateId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlternateId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlternateId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlternateId::MergeFrom(const AlternateId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id_type()) {
      set_id_type(from.id_type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlternateId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlternateId::CopyFrom(const AlternateId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlternateId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AlternateId::Swap(AlternateId* other) {
  if (other != this) {
    std::swap(id_type_, other->id_type_);
    std::swap(id_, other->id_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlternateId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlternateId_descriptor_;
  metadata.reflection = AlternateId_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Instrument_InstrumentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Instrument_InstrumentType_descriptor_;
}
bool Instrument_InstrumentType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Instrument_InstrumentType Instrument::STOCK;
const Instrument_InstrumentType Instrument::FUTURE;
const Instrument_InstrumentType Instrument::OPTION;
const Instrument_InstrumentType Instrument::FOREX;
const Instrument_InstrumentType Instrument::InstrumentType_MIN;
const Instrument_InstrumentType Instrument::InstrumentType_MAX;
const int Instrument::InstrumentType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Instrument::kIdFieldNumber;
const int Instrument::kTypeFieldNumber;
const int Instrument::kTickerFieldNumber;
const int Instrument::kDescriptionFieldNumber;
const int Instrument::kExchangeFieldNumber;
const int Instrument::kExchangeGroupFieldNumber;
const int Instrument::kMinOrderSizeFieldNumber;
const int Instrument::kTickSizeFieldNumber;
const int Instrument::kTradeableTickSizeFieldNumber;
const int Instrument::kCurrencyFieldNumber;
const int Instrument::kAlternateIdFieldNumber;
const int Instrument::kFuturesSpecFieldNumber;
const int Instrument::kOptionsSpecFieldNumber;
#endif  // !_MSC_VER

Instrument::Instrument()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kaqt.providers.protobuf.Instrument)
}

void Instrument::InitAsDefaultInstance() {
  futures_spec_ = const_cast< ::kaqt::providers::protobuf::FutureSpecification*>(&::kaqt::providers::protobuf::FutureSpecification::default_instance());
  options_spec_ = const_cast< ::kaqt::providers::protobuf::OptionSpecification*>(&::kaqt::providers::protobuf::OptionSpecification::default_instance());
}

Instrument::Instrument(const Instrument& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kaqt.providers.protobuf.Instrument)
}

void Instrument::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  ticker_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  min_order_size_ = 0;
  tick_size_ = 0;
  tradeable_tick_size_ = 0;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  futures_spec_ = NULL;
  options_spec_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Instrument::~Instrument() {
  // @@protoc_insertion_point(destructor:kaqt.providers.protobuf.Instrument)
  SharedDtor();
}

void Instrument::SharedDtor() {
  if (ticker_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ticker_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_;
  }
  if (exchange_group_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchange_group_;
  }
  if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currency_;
  }
  if (this != default_instance_) {
    delete futures_spec_;
    delete options_spec_;
  }
}

void Instrument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Instrument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Instrument_descriptor_;
}

const Instrument& Instrument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbology_2eproto();
  return *default_instance_;
}

Instrument* Instrument::default_instance_ = NULL;

Instrument* Instrument::New() const {
  return new Instrument;
}

void Instrument::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Instrument*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, type_);
    if (has_ticker()) {
      if (ticker_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ticker_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_->clear();
      }
    }
    if (has_exchange_group()) {
      if (exchange_group_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchange_group_->clear();
      }
    }
    min_order_size_ = 0;
    tick_size_ = 0;
  }
  if (_has_bits_[8 / 32] & 6912) {
    tradeable_tick_size_ = 0;
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        currency_->clear();
      }
    }
    if (has_futures_spec()) {
      if (futures_spec_ != NULL) futures_spec_->::kaqt::providers::protobuf::FutureSpecification::Clear();
    }
    if (has_options_spec()) {
      if (options_spec_ != NULL) options_spec_->::kaqt::providers::protobuf::OptionSpecification::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  alternate_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Instrument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kaqt.providers.protobuf.Instrument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .kaqt.providers.protobuf.Instrument.InstrumentType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kaqt::providers::protobuf::Instrument_InstrumentType_IsValid(value)) {
            set_type(static_cast< ::kaqt::providers::protobuf::Instrument_InstrumentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ticker;
        break;
      }

      // required string ticker = 3;
      case 3: {
        if (tag == 26) {
         parse_ticker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticker()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticker().data(), this->ticker().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ticker");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // required string description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_exchange;
        break;
      }

      // required string exchange = 5;
      case 5: {
        if (tag == 42) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_exchange_group;
        break;
      }

      // optional string exchange_group = 6;
      case 6: {
        if (tag == 50) {
         parse_exchange_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange_group().data(), this->exchange_group().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchange_group");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_min_order_size;
        break;
      }

      // required int32 min_order_size = 7;
      case 7: {
        if (tag == 56) {
         parse_min_order_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_order_size_)));
          set_has_min_order_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_tick_size;
        break;
      }

      // required double tick_size = 8;
      case 8: {
        if (tag == 65) {
         parse_tick_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tick_size_)));
          set_has_tick_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_tradeable_tick_size;
        break;
      }

      // required double tradeable_tick_size = 9;
      case 9: {
        if (tag == 73) {
         parse_tradeable_tick_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tradeable_tick_size_)));
          set_has_tradeable_tick_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_currency;
        break;
      }

      // required string currency = 10;
      case 10: {
        if (tag == 82) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "currency");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_alternate_id;
        break;
      }

      // repeated .kaqt.providers.protobuf.AlternateId alternate_id = 11;
      case 11: {
        if (tag == 90) {
         parse_alternate_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alternate_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_alternate_id;
        if (input->ExpectTag(98)) goto parse_futures_spec;
        break;
      }

      // optional .kaqt.providers.protobuf.FutureSpecification futures_spec = 12;
      case 12: {
        if (tag == 98) {
         parse_futures_spec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_futures_spec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_options_spec;
        break;
      }

      // optional .kaqt.providers.protobuf.OptionSpecification options_spec = 13;
      case 13: {
        if (tag == 106) {
         parse_options_spec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options_spec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kaqt.providers.protobuf.Instrument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kaqt.providers.protobuf.Instrument)
  return false;
#undef DO_
}

void Instrument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kaqt.providers.protobuf.Instrument)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .kaqt.providers.protobuf.Instrument.InstrumentType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required string ticker = 3;
  if (has_ticker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticker().data(), this->ticker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ticker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ticker(), output);
  }

  // required string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // required string exchange = 5;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchange(), output);
  }

  // optional string exchange_group = 6;
  if (has_exchange_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_group().data(), this->exchange_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->exchange_group(), output);
  }

  // required int32 min_order_size = 7;
  if (has_min_order_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->min_order_size(), output);
  }

  // required double tick_size = 8;
  if (has_tick_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->tick_size(), output);
  }

  // required double tradeable_tick_size = 9;
  if (has_tradeable_tick_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->tradeable_tick_size(), output);
  }

  // required string currency = 10;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->currency(), output);
  }

  // repeated .kaqt.providers.protobuf.AlternateId alternate_id = 11;
  for (int i = 0; i < this->alternate_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->alternate_id(i), output);
  }

  // optional .kaqt.providers.protobuf.FutureSpecification futures_spec = 12;
  if (has_futures_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->futures_spec(), output);
  }

  // optional .kaqt.providers.protobuf.OptionSpecification options_spec = 13;
  if (has_options_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->options_spec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kaqt.providers.protobuf.Instrument)
}

::google::protobuf::uint8* Instrument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaqt.providers.protobuf.Instrument)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .kaqt.providers.protobuf.Instrument.InstrumentType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required string ticker = 3;
  if (has_ticker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticker().data(), this->ticker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ticker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ticker(), target);
  }

  // required string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // required string exchange = 5;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchange(), target);
  }

  // optional string exchange_group = 6;
  if (has_exchange_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange_group().data(), this->exchange_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchange_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->exchange_group(), target);
  }

  // required int32 min_order_size = 7;
  if (has_min_order_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->min_order_size(), target);
  }

  // required double tick_size = 8;
  if (has_tick_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->tick_size(), target);
  }

  // required double tradeable_tick_size = 9;
  if (has_tradeable_tick_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->tradeable_tick_size(), target);
  }

  // required string currency = 10;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->currency(), target);
  }

  // repeated .kaqt.providers.protobuf.AlternateId alternate_id = 11;
  for (int i = 0; i < this->alternate_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->alternate_id(i), target);
  }

  // optional .kaqt.providers.protobuf.FutureSpecification futures_spec = 12;
  if (has_futures_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->futures_spec(), target);
  }

  // optional .kaqt.providers.protobuf.OptionSpecification options_spec = 13;
  if (has_options_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->options_spec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaqt.providers.protobuf.Instrument)
  return target;
}

int Instrument::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .kaqt.providers.protobuf.Instrument.InstrumentType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string ticker = 3;
    if (has_ticker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticker());
    }

    // required string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required string exchange = 5;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string exchange_group = 6;
    if (has_exchange_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange_group());
    }

    // required int32 min_order_size = 7;
    if (has_min_order_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_order_size());
    }

    // required double tick_size = 8;
    if (has_tick_size()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double tradeable_tick_size = 9;
    if (has_tradeable_tick_size()) {
      total_size += 1 + 8;
    }

    // required string currency = 10;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional .kaqt.providers.protobuf.FutureSpecification futures_spec = 12;
    if (has_futures_spec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->futures_spec());
    }

    // optional .kaqt.providers.protobuf.OptionSpecification options_spec = 13;
    if (has_options_spec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options_spec());
    }

  }
  // repeated .kaqt.providers.protobuf.AlternateId alternate_id = 11;
  total_size += 1 * this->alternate_id_size();
  for (int i = 0; i < this->alternate_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alternate_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instrument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Instrument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Instrument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Instrument::MergeFrom(const Instrument& from) {
  GOOGLE_CHECK_NE(&from, this);
  alternate_id_.MergeFrom(from.alternate_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ticker()) {
      set_ticker(from.ticker());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_exchange_group()) {
      set_exchange_group(from.exchange_group());
    }
    if (from.has_min_order_size()) {
      set_min_order_size(from.min_order_size());
    }
    if (from.has_tick_size()) {
      set_tick_size(from.tick_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tradeable_tick_size()) {
      set_tradeable_tick_size(from.tradeable_tick_size());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_futures_spec()) {
      mutable_futures_spec()->::kaqt::providers::protobuf::FutureSpecification::MergeFrom(from.futures_spec());
    }
    if (from.has_options_spec()) {
      mutable_options_spec()->::kaqt::providers::protobuf::OptionSpecification::MergeFrom(from.options_spec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Instrument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instrument::CopyFrom(const Instrument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instrument::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003df) != 0x000003df) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->alternate_id())) return false;
  if (has_futures_spec()) {
    if (!this->futures_spec().IsInitialized()) return false;
  }
  if (has_options_spec()) {
    if (!this->options_spec().IsInitialized()) return false;
  }
  return true;
}

void Instrument::Swap(Instrument* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(ticker_, other->ticker_);
    std::swap(description_, other->description_);
    std::swap(exchange_, other->exchange_);
    std::swap(exchange_group_, other->exchange_group_);
    std::swap(min_order_size_, other->min_order_size_);
    std::swap(tick_size_, other->tick_size_);
    std::swap(tradeable_tick_size_, other->tradeable_tick_size_);
    std::swap(currency_, other->currency_);
    alternate_id_.Swap(&other->alternate_id_);
    std::swap(futures_spec_, other->futures_spec_);
    std::swap(options_spec_, other->options_spec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Instrument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Instrument_descriptor_;
  metadata.reflection = Instrument_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FutureSpecification::kExpiryPosixDatetimeFieldNumber;
const int FutureSpecification::kUnderlyingFieldNumber;
#endif  // !_MSC_VER

FutureSpecification::FutureSpecification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kaqt.providers.protobuf.FutureSpecification)
}

void FutureSpecification::InitAsDefaultInstance() {
}

FutureSpecification::FutureSpecification(const FutureSpecification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kaqt.providers.protobuf.FutureSpecification)
}

void FutureSpecification::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  expiry_posix_datetime_ = GOOGLE_LONGLONG(0);
  underlying_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FutureSpecification::~FutureSpecification() {
  // @@protoc_insertion_point(destructor:kaqt.providers.protobuf.FutureSpecification)
  SharedDtor();
}

void FutureSpecification::SharedDtor() {
  if (underlying_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete underlying_;
  }
  if (this != default_instance_) {
  }
}

void FutureSpecification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FutureSpecification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FutureSpecification_descriptor_;
}

const FutureSpecification& FutureSpecification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbology_2eproto();
  return *default_instance_;
}

FutureSpecification* FutureSpecification::default_instance_ = NULL;

FutureSpecification* FutureSpecification::New() const {
  return new FutureSpecification;
}

void FutureSpecification::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    expiry_posix_datetime_ = GOOGLE_LONGLONG(0);
    if (has_underlying()) {
      if (underlying_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        underlying_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FutureSpecification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kaqt.providers.protobuf.FutureSpecification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 expiry_posix_datetime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiry_posix_datetime_)));
          set_has_expiry_posix_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_underlying;
        break;
      }

      // required string underlying = 2;
      case 2: {
        if (tag == 18) {
         parse_underlying:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlying().data(), this->underlying().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "underlying");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kaqt.providers.protobuf.FutureSpecification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kaqt.providers.protobuf.FutureSpecification)
  return false;
#undef DO_
}

void FutureSpecification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kaqt.providers.protobuf.FutureSpecification)
  // required int64 expiry_posix_datetime = 1;
  if (has_expiry_posix_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->expiry_posix_datetime(), output);
  }

  // required string underlying = 2;
  if (has_underlying()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying().data(), this->underlying().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "underlying");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->underlying(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kaqt.providers.protobuf.FutureSpecification)
}

::google::protobuf::uint8* FutureSpecification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaqt.providers.protobuf.FutureSpecification)
  // required int64 expiry_posix_datetime = 1;
  if (has_expiry_posix_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->expiry_posix_datetime(), target);
  }

  // required string underlying = 2;
  if (has_underlying()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying().data(), this->underlying().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "underlying");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->underlying(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaqt.providers.protobuf.FutureSpecification)
  return target;
}

int FutureSpecification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 expiry_posix_datetime = 1;
    if (has_expiry_posix_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiry_posix_datetime());
    }

    // required string underlying = 2;
    if (has_underlying()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FutureSpecification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FutureSpecification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FutureSpecification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FutureSpecification::MergeFrom(const FutureSpecification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expiry_posix_datetime()) {
      set_expiry_posix_datetime(from.expiry_posix_datetime());
    }
    if (from.has_underlying()) {
      set_underlying(from.underlying());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FutureSpecification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureSpecification::CopyFrom(const FutureSpecification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureSpecification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FutureSpecification::Swap(FutureSpecification* other) {
  if (other != this) {
    std::swap(expiry_posix_datetime_, other->expiry_posix_datetime_);
    std::swap(underlying_, other->underlying_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FutureSpecification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FutureSpecification_descriptor_;
  metadata.reflection = FutureSpecification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OptionSpecification::kStrikeFieldNumber;
const int OptionSpecification::kExpiryPosixDatetimeFieldNumber;
const int OptionSpecification::kUnderlyingFieldNumber;
#endif  // !_MSC_VER

OptionSpecification::OptionSpecification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kaqt.providers.protobuf.OptionSpecification)
}

void OptionSpecification::InitAsDefaultInstance() {
}

OptionSpecification::OptionSpecification(const OptionSpecification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kaqt.providers.protobuf.OptionSpecification)
}

void OptionSpecification::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  strike_ = 0;
  expiry_posix_datetime_ = GOOGLE_LONGLONG(0);
  underlying_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OptionSpecification::~OptionSpecification() {
  // @@protoc_insertion_point(destructor:kaqt.providers.protobuf.OptionSpecification)
  SharedDtor();
}

void OptionSpecification::SharedDtor() {
  if (underlying_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete underlying_;
  }
  if (this != default_instance_) {
  }
}

void OptionSpecification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptionSpecification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptionSpecification_descriptor_;
}

const OptionSpecification& OptionSpecification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbology_2eproto();
  return *default_instance_;
}

OptionSpecification* OptionSpecification::default_instance_ = NULL;

OptionSpecification* OptionSpecification::New() const {
  return new OptionSpecification;
}

void OptionSpecification::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OptionSpecification*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(strike_, expiry_posix_datetime_);
    if (has_underlying()) {
      if (underlying_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        underlying_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OptionSpecification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kaqt.providers.protobuf.OptionSpecification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double strike = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strike_)));
          set_has_strike();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_expiry_posix_datetime;
        break;
      }

      // required int64 expiry_posix_datetime = 2;
      case 2: {
        if (tag == 16) {
         parse_expiry_posix_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiry_posix_datetime_)));
          set_has_expiry_posix_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_underlying;
        break;
      }

      // required string underlying = 3;
      case 3: {
        if (tag == 26) {
         parse_underlying:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlying().data(), this->underlying().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "underlying");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kaqt.providers.protobuf.OptionSpecification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kaqt.providers.protobuf.OptionSpecification)
  return false;
#undef DO_
}

void OptionSpecification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kaqt.providers.protobuf.OptionSpecification)
  // required double strike = 1;
  if (has_strike()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->strike(), output);
  }

  // required int64 expiry_posix_datetime = 2;
  if (has_expiry_posix_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->expiry_posix_datetime(), output);
  }

  // required string underlying = 3;
  if (has_underlying()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying().data(), this->underlying().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "underlying");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->underlying(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kaqt.providers.protobuf.OptionSpecification)
}

::google::protobuf::uint8* OptionSpecification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaqt.providers.protobuf.OptionSpecification)
  // required double strike = 1;
  if (has_strike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->strike(), target);
  }

  // required int64 expiry_posix_datetime = 2;
  if (has_expiry_posix_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->expiry_posix_datetime(), target);
  }

  // required string underlying = 3;
  if (has_underlying()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlying().data(), this->underlying().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "underlying");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->underlying(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaqt.providers.protobuf.OptionSpecification)
  return target;
}

int OptionSpecification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double strike = 1;
    if (has_strike()) {
      total_size += 1 + 8;
    }

    // required int64 expiry_posix_datetime = 2;
    if (has_expiry_posix_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiry_posix_datetime());
    }

    // required string underlying = 3;
    if (has_underlying()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptionSpecification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OptionSpecification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OptionSpecification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OptionSpecification::MergeFrom(const OptionSpecification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strike()) {
      set_strike(from.strike());
    }
    if (from.has_expiry_posix_datetime()) {
      set_expiry_posix_datetime(from.expiry_posix_datetime());
    }
    if (from.has_underlying()) {
      set_underlying(from.underlying());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OptionSpecification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionSpecification::CopyFrom(const OptionSpecification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionSpecification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void OptionSpecification::Swap(OptionSpecification* other) {
  if (other != this) {
    std::swap(strike_, other->strike_);
    std::swap(expiry_posix_datetime_, other->expiry_posix_datetime_);
    std::swap(underlying_, other->underlying_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OptionSpecification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptionSpecification_descriptor_;
  metadata.reflection = OptionSpecification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForexSpecification::kCounterCurrencyFieldNumber;
#endif  // !_MSC_VER

ForexSpecification::ForexSpecification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kaqt.providers.protobuf.ForexSpecification)
}

void ForexSpecification::InitAsDefaultInstance() {
}

ForexSpecification::ForexSpecification(const ForexSpecification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kaqt.providers.protobuf.ForexSpecification)
}

void ForexSpecification::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  counter_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForexSpecification::~ForexSpecification() {
  // @@protoc_insertion_point(destructor:kaqt.providers.protobuf.ForexSpecification)
  SharedDtor();
}

void ForexSpecification::SharedDtor() {
  if (counter_currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete counter_currency_;
  }
  if (this != default_instance_) {
  }
}

void ForexSpecification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForexSpecification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForexSpecification_descriptor_;
}

const ForexSpecification& ForexSpecification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbology_2eproto();
  return *default_instance_;
}

ForexSpecification* ForexSpecification::default_instance_ = NULL;

ForexSpecification* ForexSpecification::New() const {
  return new ForexSpecification;
}

void ForexSpecification::Clear() {
  if (has_counter_currency()) {
    if (counter_currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      counter_currency_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForexSpecification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kaqt.providers.protobuf.ForexSpecification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string counter_currency = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_counter_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->counter_currency().data(), this->counter_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "counter_currency");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kaqt.providers.protobuf.ForexSpecification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kaqt.providers.protobuf.ForexSpecification)
  return false;
#undef DO_
}

void ForexSpecification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kaqt.providers.protobuf.ForexSpecification)
  // required string counter_currency = 1;
  if (has_counter_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->counter_currency().data(), this->counter_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "counter_currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->counter_currency(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kaqt.providers.protobuf.ForexSpecification)
}

::google::protobuf::uint8* ForexSpecification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaqt.providers.protobuf.ForexSpecification)
  // required string counter_currency = 1;
  if (has_counter_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->counter_currency().data(), this->counter_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "counter_currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->counter_currency(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaqt.providers.protobuf.ForexSpecification)
  return target;
}

int ForexSpecification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string counter_currency = 1;
    if (has_counter_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->counter_currency());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForexSpecification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForexSpecification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForexSpecification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForexSpecification::MergeFrom(const ForexSpecification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_counter_currency()) {
      set_counter_currency(from.counter_currency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForexSpecification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForexSpecification::CopyFrom(const ForexSpecification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForexSpecification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ForexSpecification::Swap(ForexSpecification* other) {
  if (other != this) {
    std::swap(counter_currency_, other->counter_currency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForexSpecification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForexSpecification_descriptor_;
  metadata.reflection = ForexSpecification_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace providers
}  // namespace kaqt

// @@protoc_insertion_point(global_scope)
